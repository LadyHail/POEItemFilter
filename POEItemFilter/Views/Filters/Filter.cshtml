@model POEItemFilter.ViewModels.FilterViewModel

@{
    ViewBag.Title = "Filter";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var classes = new SelectList(new[]
    {
        new {Id = "0", Name = "All"},
        new {Id = "1", Name = "Marauder"},
        new {Id = "2", Name = "Duelist"},
        new {Id = "3", Name = "Ranger"},
        new {Id = "4", Name = "Shadow"},
        new {Id = "5", Name = "Witch"},
        new {Id = "6", Name = "Templar"},
        new {Id = "7", Name = "Scion"},
    }, "Id", "Name", 0);
}

<div class="body-content container table-bordered alert-info">
    <ul class="list-unstyled">
        <li class="text-justify"><span class="glyphicon glyphicon-info-sign btn-lg" aria-hidden="true"></span>You're responsible on items order in your filter. The program do not set it up. It doesn't know which item should go first. You can change item order at any time.</li>
        <li class="text-justify"><span class="glyphicon glyphicon-info-sign btn-lg" aria-hidden="true"></span>The program is saving each property of the item by given algorithm. After download make sure the filter is saved by the way as you wanted. At any time you can change the filter on your own.</li>
    </ul>
</div>

@if (Model.Name == null)
{
    <h2>Create new item filter</h2>
}
else
{
    <h2>Edit item filter</h2>
}

<div id="filterForm" class="body-content container">
    @using (Html.BeginForm("Save", "Filters", FormMethod.Post))
    {
        @Html.ValidationSummary()
        <p>
            @Html.LabelFor(f => f.Name)
            <br />
            @Html.TextAreaFor(f => f.Name, new { @class = "my-textarea height-name" })
        </p>
        <p>
            @Html.LabelFor(f => f.Description)
            <br />
            @Html.TextAreaFor(f => f.Description, new { @class = "my-textarea height-description" })
        </p>
        <p>
            @Html.Label("Is your filter dedicated to class?")
            @Html.CheckBox("dedicatedCB", false, new { @class = "checkbox-inline" })
            @Html.DropDownList("Dedicated", classes, new { @class = "my-btn" })
        </p>

        <p>
            @{if (Model.UserId == null)
                {
                    <button type="button" id="newItemSession" class="btn btn-primary" aria-label="Left Align">
                        Add new item
                        <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
                    </button>
                }
                else
                {
                    <button type="button" id="newItemDb" class="btn btn-primary" aria-label="Left Align">
                        Add new item
                        <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
                    </button>
                }
            }
            <button id="createFilter" type="submit" class="btn btn-success" aria-label="Left Align">
                Save filter
                <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
            </button>
        </p>

        <div id="itemsList" class="margin-top">
            @if (Model.Items.Count > 0)
            {
            <table class="table" id="itemsListTable">
                <tr>
                    <th>Items list</th>
                    <th></th>
                    <th></th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>@item.ToString()</td>
                        <td><button data-item-id="@item.Id" class="btn btn-sm btn-primary js-id-up" type="button"><span class="glyphicon glyphicon-menu-up" aria-hidden="true"></span></button></td>
                        <td><button data-item-id="@item.Id" class="btn btn-sm btn-primary js-id-down" type="button"><span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span></button></td>
                        <td><button data-item-id="@item.Id" class="btn btn-sm btn-primary js-edit" type="button">Edit</button></td>
                        <td><button data-item-id="@item.Id" class="btn btn-sm btn-primary js-delete" type="button">Delete</button></td>
                    </tr>
                }
            </table>
            }
        </div>

        for (int i = 0; i < Model.Items.Count; i++)
        {
            @Html.HiddenFor(m => m.Items[i].Attribute1)
            @Html.HiddenFor(m => m.Items[i].Attribute2)
            @Html.HiddenFor(m => m.Items[i].BaseType)
            @Html.HiddenFor(m => m.Items[i].Class)
            @Html.HiddenFor(m => m.Items[i].Corrupted)
            @Html.HiddenFor(m => m.Items[i].DropLevel)
            @Html.HiddenFor(m => m.Items[i].FilterId)
            @Html.HiddenFor(m => m.Items[i].Height)
            @Html.HiddenFor(m => m.Items[i].Id)
            @Html.HiddenFor(m => m.Items[i].Identified)
            @Html.HiddenFor(m => m.Items[i].ItemLevel)
            @Html.HiddenFor(m => m.Items[i].LinkedSockets)
            @Html.HiddenFor(m => m.Items[i].MainCategory)
            @Html.HiddenFor(m => m.Items[i].PlayAlertSound)
            @Html.HiddenFor(m => m.Items[i].Quality)
            @Html.HiddenFor(m => m.Items[i].Rarity)
            @Html.HiddenFor(m => m.Items[i].RowId)
            @Html.HiddenFor(m => m.Items[i].SetBackgroundColor)
            @Html.HiddenFor(m => m.Items[i].SetBorderColor)
            @Html.HiddenFor(m => m.Items[i].SetFontSize)
            @Html.HiddenFor(m => m.Items[i].SetTextColor)
            @Html.HiddenFor(m => m.Items[i].Show)
            @Html.HiddenFor(m => m.Items[i].Sockets)
            @Html.HiddenFor(m => m.Items[i].SocketsGroup)
            @Html.HiddenFor(m => m.Items[i].UserBaseType)
            @Html.HiddenFor(m => m.Items[i].Width)
            //@Html.HiddenFor(m=>m.Items[i]) //zwraca tylko 1 item jako null
                }
            @Html.HiddenFor(f => f.Id)
            @Html.HiddenFor(f=>f.UserId)
            @*@Html.HiddenFor(f => f.Items) // zwraca items jako null*@
    }
        </div>

@section scripts
{
    <script>
        $(document).ready(function () {

            //Add new item session
            $("#newItemSession").click(function () {
                $.ajax({
                    url: "@Url.Action("ItemSession", "UsersItems")",
                    method: "GET",
                    success: function (data) {
                        $("body").html(data);
                    },
                });
            });

            //Add new item db
            $("#newItemDb").click(function () {
                $.ajax({
                    url: "@Url.Action("ItemDb", "UsersItems")" + "/?filterId=" + "@Model.Id",
                    method: "GET",
                    success: function (data) {
                        $("body").html(data);
                    },
                });
            });

            //Change item order - move up.
            $("#itemsListTable").on("click", ".js-id-up", function () {
                var button = $(this);
                if ("@Model.Id" === "0") {
                    $.ajax({
                        url: "@Url.Action("ChangeSessionItemOrderUp", "Filters")" + "/" + button.attr("data-item-id"),
                        method: "POST",
                        success: function (data) {
                            $("body").html(data);
                        },
                    });
                } else {
                    $.ajax({
                        url: "@Url.Action("ChangeDbItemOrderUp", "Filters")" + "/" + button.attr("data-item-id"),
                        method: "POST",
                        success: function (data) {
                            $("body").html(data);
                        },
                    });
                }

            });

            //Change item order - move down.
            $("#itemsListTable").on("click", ".js-id-down", function () {
                var button = $(this);
                if ("@Model.Id" === "0") {
                    $.ajax({
                        url: "@Url.Action("ChangeSessionItemOrderDown", "Filters")" + "/" + button.attr("data-item-id"),
                        method: "POST",
                        success: function (data) {
                            $("body").html(data);
                        },
                    });
                } else {
                    $.ajax({
                        url: "@Url.Action("ChangeDbItemOrderDown", "Filters")" + "/" + button.attr("data-item-id"),
                        method: "POST",
                        success: function (data) {
                            $("body").html(data);
                        },
                    });
                }
            });

            //Edit item
            $("#itemsListTable").on("click", ".js-edit", function () {
                var button = $(this);
                if ("@Model.Id" === "0") {
                    $.ajax({
                        url: "@Url.Action("ItemSession", "UsersItems")" + "/" + button.attr("data-item-id"),
                        method: "GET",
                        success: function (data) {
                            $("body").html(data);
                        },
                    });
                } else {
                    $.ajax({
                        url: "@Url.Action("ItemDb", "UsersItems")" + "/?itemId=" + button.attr("data-item-id"),
                        method: "GET",
                        success: function (data) {
                            $("body").html(data);
                        },
                    });
                }
            });

            //Delete item from list
            $("#itemsListTable").on("click", ".js-delete", function () {
                var button = $(this);
                bootbox.confirm("Are you sure you want to delete this item?", function (result) {
                    if (result) {
                        if ("@Model.Id" === "0") {
                            $.ajax({
                                url: "@Url.Action("DeleteItemSession", "UsersItems")" + "/" + button.attr("data-item-id"),
                                method: "POST",
                                success: function () {
                                    button.parents("tr").remove();
                                },
                            });
                        } else {
                            $.ajax({
                                url: "@Url.Action("DeleteItemDb", "UsersItems")" + "/" + button.attr("data-item-id"),
                                method: "POST",
                                success: function () {
                                    button.parents("tr").remove();
                                },
                            });
                        }
                    }
                });
            });

            //Prevent user to enter special character.
            $("textarea").keyup(function() {
                let raw_text = $(this).val();
                let return_text = raw_text.replace(/[^a-zA-Z0-9 _]/g, '');
                $(this).val(return_text);
            });

            //Set behaviour of checkbox.
            var dedicated = $("#filterForm").find("#dedicatedCB");
            var classes = $("#filterForm").find("#Dedicated").detach();
            dedicated.click(function () {
                if (document.getElementById("dedicatedCB").checked) {
                    classes.insertAfter(dedicated);
                } else {
                    classes.detach();
                }
            });
    });
    </script>
}