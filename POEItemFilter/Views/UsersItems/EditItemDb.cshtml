@model POEItemFilter.Models.ItemUser

@{
    ViewBag.Title = "Edit item";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2><b>Edit item</b></h2>
<hr />

@{
    var signsList = new SelectList(new[]
    {
        new {Id = "", Sign = ""},
        new {Id = "1", Sign = "= (equal)"},
        new {Id = "2", Sign = "> (greater than)"},
        new {Id = "3", Sign = "< (less than)"},
        new {Id = "4", Sign = ">= (greater or equal)"},
        new {Id = "5", Sign = "<= (less or equal)"},
    },
    "Id", "Sign", "");

    var itemRarity = new SelectList(new[]
    {
        new {Id = "", Name = "All"},
        new {Id = "1", Name = "Normal"},
        new {Id = "2", Name = "Magic"},
        new {Id = "3", Name = "Rare"},
        new {Id = "4", Name = "Unique"},
    },
    "Id", "Name", "");

    var boolSelect = new SelectList(new[]
    {
        new {Id = "0", Name = "No (default)"},
        new {Id = "1", Name = "Yes"},
    },
    "Id", "Name", 0);
}
    <button id="basicToggle" type="button" class="btn btn-primary btn-sm" aria-label="Left Align">
        Basic information
        <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
    </button>
    <p id="basicBreak" />

@using (Html.BeginForm("EditItemDb", "UsersItems", new { filterId = Model.FilterId, itemId = Model.Id }, FormMethod.Post))
{ 
    <div id="databaseItems" class="container body-content">
        @{Html.RenderAction("Refresh", "UsersItems", new { id = "null|null|null|null" });}
    </div>
    <p id="itemNotInDbCB">
        @Html.Label("Item is not in database?")
        @Html.CheckBox("itemNotInDb", false)
    </p>
    <p id="userItemTB">
        @Html.Label("Item name: ")
        @Html.TextBox("UserItem", "", new { @class = "my-textarea" })
    </p>
    <hr />

    <button id="lvlToggle" type="button" class="btn btn-primary btn-sm" aria-label="Left Align">
        Level information
        <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
    </button>
    <p />

    <div id="itemLvl" class="container body-content">
        <p>
            @Html.Label("Item level: ")
            @Html.DropDownList("ItemLvlSelectSign", signsList, new { @class = "my-btn" })
            @Html.DropDownList("ItemLvlSelect", new SelectList(Enumerable.Range(0, 101)), "All", new { @class = "my-btn" })
            @Html.Label("Select item level range: ")
            @Html.DropDownList("ItemLvlRangeSelect1", new SelectList(Enumerable.Range(0, 101)), "All", new { @class = "my-btn" })
            @Html.DropDownList("ItemLvlRangeSelect2", new SelectList(Enumerable.Range(0, 101)), "All", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Item drop level: ")
            @Html.DropDownList("DropLevelSelectSign", signsList, new { @class = "my-btn" })
            @Html.DropDownList("DropLevelSelect", new SelectList(Enumerable.Range(0, 101)), "All", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Item quality: ")
            @Html.DropDownList("ItemQualitySelectSign", signsList, new { @class = "my-btn" })
            @Html.DropDownList("ItemQualitySelect", new SelectList(Enumerable.Range(0, 21)), "All", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Item rarity: ")
            @Html.DropDownList("ItemRaritySelectSign", signsList, new { @class = "my-btn" })
            @Html.DropDownList("ItemRaritySelect", itemRarity, new { @class = "my-btn" })
        </p>
    </div>
    <hr />

    <button id="socketsToggle" type="button" class="btn btn-primary btn-sm" aria-label="Left Align">
        Sockets information
        <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
    </button>
    <p />
    <div id="sockets" class="container body-content">
        <p>
            @Html.Label("Number of sockets: ")
            @Html.DropDownList("SocketsNumberSelectSign", signsList, new { @class = "my-btn" })
            @Html.DropDownList("SocketsNumberSelect", new SelectList(Enumerable.Range(0, 7)), "All", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Number of linked sockets: ")
            @Html.DropDownList("LinkedSocketsNumberSelectSign", signsList, new { @class = "my-btn" })
            @Html.DropDownList("LinkedSocketsNumberSelect", new SelectList(Enumerable.Range(2, 5)), "All", new { @class = "my-btn" })
        </p>

        <p>
            @Html.Label("Colours of linked sockets: ")
            @Html.Label("Red: ")
            @Html.DropDownList("RedSocketsSelect", new SelectList(Enumerable.Range(0, 7)), "", new { @class = "my-btn" })
            @Html.Label("Green: ")
            @Html.DropDownList("GreenSocketsSelect", new SelectList(Enumerable.Range(0, 7)), "", new { @class = "my-btn" })
            @Html.Label("Blue: ")
            @Html.DropDownList("BlueSocketsSelect", new SelectList(Enumerable.Range(0, 7)), "", new { @class = "my-btn" })
            @Html.Label("White: ")
            @Html.DropDownList("WhiteSocketsSelect", new SelectList(Enumerable.Range(0, 7)), "", new { @class = "my-btn" })
        </p>
    </div>
    <hr />

    <button id="sizeToggle" type="button" class="btn btn-primary btn-sm" aria-label="Left Align">
        Dimension information
        <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
    </button>
    <p />
    <div id="size" class="container body-content">
        <p>
            @Html.Label("Set height: ")
            @Html.DropDownList("HeightSelectSign", signsList, new { @class = "my-btn" })
            @Html.DropDownList("HeightSelect", new SelectList(Enumerable.Range(1, 4)), "All", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Set width: ")
            @Html.DropDownList("WidthSelectSign", signsList, new { @class = "my-btn" })
            @Html.DropDownList("WidthSelect", new SelectList(Enumerable.Range(1, 2)), "All", new { @class = "my-btn" })
        </p>
    </div>
    <hr />

    <button id="otherToggle" type="button" class="btn btn-primary btn-sm" aria-label="Left Align">
        Other information
        <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
    </button>
    <p />
    <div id="other" class="container body-content">
        <p>
            @Html.Label("Identified?")
            @Html.DropDownList("IdentifiedSelect", boolSelect, new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Corrupted?")
            @Html.DropDownList("CorruptedSelect", boolSelect, new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Border color: ")
            @Html.Label("Red: ")
            @Html.DropDownList("BorderRedSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Green: ")
            @Html.DropDownList("BorderGreenSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Blue: ")
            @Html.DropDownList("BorderBlueSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Border opacity: ")
            @Html.DropDownList("BorderAlphaSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Text color: ")
            @Html.Label("Red: ")
            @Html.DropDownList("TextRedSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Green: ")
            @Html.DropDownList("TextGreenSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Blue: ")
            @Html.DropDownList("TextBlueSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Text opacity: ")
            @Html.DropDownList("TextAlphaSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Background color: ")
            @Html.Label("Red: ")
            @Html.DropDownList("BackRedSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Green: ")
            @Html.DropDownList("BackGreenSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Blue: ")
            @Html.DropDownList("BackBlueSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
            @Html.Label("Background opacity: ")
            @Html.DropDownList("BackAlphaSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Font size: ")
            @Html.DropDownList("FontSizeSelect", new SelectList(Enumerable.Range(18, 45)), "", new { @class = "my-btn" })
        </p>
        <p>
            @Html.Label("Play Alert Sound: ")
            @Html.DropDownList("PlayAlertSoundTypeSelect", new SelectList(Enumerable.Range(1, 26)), "", new { @class = "my-btn" })
            @Html.DropDownList("PlayAlertSoundVolumeSelect", new SelectList(Enumerable.Range(0, 300)), "", new { @class = "my-btn" })
        </p>
    </div>
    <hr />

    <div id="saveButton" style="float:right">
        <span class="text-uppercase text-primary text-danger"><b>Show or hide item?</b></span>
        <p />
        <select id="showOrHideSelect" class="btn btn-default btn-danger btn-lg" name="Show">
            <option value="0">Hide</option>
            <option value="1" selected="selected">Show</option>
        </select>
        <p />
        <button id="saveItem" type="submit" class="btn btn-default btn-success btn-lg" aria-label="Left Align" style="float:right">
            Add item
            <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
        </button>
    </div>

    @Html.Hidden("ItemId", Model.Id)
    @Html.Hidden("FilterId", Model.FilterId)
                
 }

@section scripts
{
    <script>
            $(document).ready(function () {
                setOldValues();

                // Add/remove additional textarea if item is not in database.
                var dbItems = $("#databaseItems");
                var userItem = $("#userItemTB").detach();
                $("#itemNotInDb").click(function () {
                    if (document.getElementById("itemNotInDb").checked) {
                        dbItems.detach();
                        userItem.insertAfter("#itemNotInDbCB");
                    } else {
                        dbItems.insertAfter("#basicBreak");
                        userItem.detach();
                    }
                });

                // Add item to filter and clear cookies.
                $("#saveItem").click(function () {
                    setCookie("baseTypeSelectedId", null);
                    setCookie("typeSelectedId", null);
                    setCookie("attribute1SelectedId", null);
                    setCookie("attribute2SelectedId", null);
                    setCookie("itemSelectedId", null);
                });

                // Hide at start most part of view.
                $("#itemLvl").hide();
                $("#sockets").hide();
                $("#size").hide();
                $("#other").hide();

                // Toggle hide/show part of view.
                $("#basicToggle").click(function () {
                    $("#databaseItems").slideToggle();
                    $("#itemNotInDbCB").slideToggle();
                    $("#userItemTB").slideToggle();
                });

                $("#lvlToggle").click(function () {
                    $("#itemLvl").slideToggle();
                });

                $("#socketsToggle").click(function () {
                    $("#sockets").slideToggle();
                });

                $("#sizeToggle").click(function () {
                    $("#size").slideToggle();
                });

                $("#otherToggle").click(function () {
                    $("#other").slideToggle();
                });

                // This part of script applies to #databaseItems div element.
                $("#databaseItems").on("change", "#baseTypes", function () {
                    if ($("#baseTypes option:selected").text() == "Armour" || $("#baseTypes option:selected").text() == "All") {
                        $("#attribute1").show();
                        $("#attribute2").show();
                    } else {
                        $("#attribute1").hide();
                        $("#attribute2").hide();
                    }

                    var baseType = $("#baseTypes").val();
                    var type = null;
                    var attribute1 = null;
                    var attribute2 = null;
                    var item = null;

                    setCookie("baseTypeSelectedId", baseType);
                    setCookie("typeSelectedId", type);
                    setCookie("attribute1SelectedId", attribute1);
                    setCookie("attribute2SelectedId", attribute2);
                    setCookie("itemSelectedId", item);

                    var selectedIds = String(baseType + "|" + type + "|" + attribute1 + "|" + attribute2); // basetype#type#attribute1#attribute2
                    $.get("/UsersItems/Refresh/" + selectedIds, function (data) {
                        $("#databaseItems").html(data);
                        setOldValues();
                    });
                });

                $("#databaseItems").on("change", "#types", function () {
                    if ($("#baseTypes option:selected").text() == "Armour" || $("#types option:selected").text() == "BodyArmour" || $("#types option:selected").text() == "Helmet" ||
                        $("#types option:selected").text() == "Shield" || $("#types option:selected").text() == "Gloves" || $("#types option:selected").text() == "Boots") {
                        $("#attribute1").show();
                        $("#attribute2").show();
                    } else {
                        $("#attribute1").hide();
                        $("#attribute2").hide();
                    }

                    if ($("#baseTypes option:selected").text() != "All") {
                        var baseType = $("#baseTypes").val();
                        var type = $("#types").val();
                        var attribute1 = null;
                        var attribute2 = null;
                        var item = null;
                    } else {
                        var baseType = null;
                        var type = $("#types").val();
                        var attribute1 = null;
                        var attribute2 = null;
                        var item = null;
                    }

                    setCookie("baseTypeSelectedId", baseType);
                    setCookie("typeSelectedId", type);
                    setCookie("attribute1SelectedId", attribute1);
                    setCookie("attribute2SelectedId", attribute2);
                    setCookie("itemSelectedId", item);

                    var selectedIds = String(baseType + "|" + type + "|" + attribute1 + "|" + attribute2); // basetype#type#attribute1#attribute2
                    $.get("/UsersItems/Refresh/" + selectedIds, function (data) {
                        $("#databaseItems").html(data);
                        setOldValues();
                    });
                });

                $("#databaseItems").on("change", "#attribute1", function () {
                    if ($("#baseTypes option:selected").text() != "All") {
                        if ($("#types option:selected").text() != "All") {
                            var baseType = $("#baseTypes").val();
                            var type = $("#types").val();
                            var attribute1 = $("#attribute1").val();
                            if ($("#attribute2 option:selected").text() != "All") {
                                var attribute2 = $("#attribute2").val();
                            } else {
                                var attribute2 = null;
                            }
                            var item = null;
                        } else {
                            var baseType = $("#baseTypes").val();
                            var type = null;
                            var attribute1 = $("#attribute1").val();
                            if ($("#attribute2 option:selected").text() != "All") {
                                var attribute2 = $("#attribute2").val();
                            } else {
                                var attribute2 = null;
                            }
                            var item = null;
                        }
                    } else {
                        if ($("#types option:selected").text() != "All") {
                            var baseType = null;
                            var type = $("#types").val();
                            var attribute1 = $("#attribute1").val();
                            if ($("#attribute2 option:selected").text() != "All") {
                                var attribute2 = $("#attribute2").val();
                            } else {
                                var attribute2 = null;
                            }
                            var item = null;
                        } else {
                            var baseType = null;
                            var type = null;
                            var attribute1 = $("#attribute1").val();
                            if ($("#attribute2 option:selected").text() != "All") {
                                var attribute2 = $("#attribute2").val();
                            } else {
                                var attribute2 = null;
                            }
                            var item = null;
                        }
                    }

                    setCookie("baseTypeSelectedId", baseType);
                    setCookie("typeSelectedId", type);
                    setCookie("attribute1SelectedId", attribute1);
                    setCookie("attribute2SelectedId", attribute2);
                    setCookie("itemSelectedId", item);

                    var selectedIds = String(baseType + "|" + type + "|" + attribute1 + "|" + attribute2); // basetype#type#attribute1#attribute2
                    $.get("/UsersItems/Refresh/" + selectedIds, function (data) {
                        $("#databaseItems").html(data);
                        setOldValues();
                    });
                });

                $("#databaseItems").on("change", "#attribute2", function() {
                    if ($("#baseTypes option:selected").text() != "All") {
                        if ($("#types option:selected").text() != "All") {
                            var baseType = $("#baseTypes").val();
                            var type = $("#types").val();
                            var attribute2 = $("#attribute2").val();
                            if ($("#attribute1 option:selected").text() != "All") {
                                var attribute1 = $("#attribute1").val();
                            } else {
                                var attribute1 = null;
                            }
                            var item = null;
                        } else {
                            var baseType = $("#baseTypes").val();
                            var type = null;
                            var attribute2 = $("#attribute2").val();
                            if ($("#attribute1 option:selected").text() != "All") {
                                var attribute1 = $("#attribute1").val();
                            } else {
                                var attribute1 = null;
                            }
                            var item = null;
                        }
                    } else {
                        if ($("#types option:selected").text() != "All") {
                            var baseType = null;
                            var type = $("#types").val();
                            var attribute2 = $("#attribute2").val();
                            if ($("#attribute1 option:selected").text() != "All") {
                                var attribute1 = $("#attribute1").val();
                            } else {
                                var attribute1 = null;
                            }
                            var item = null;
                        } else {
                            var baseType = null;
                            var type = null;
                            var attribute2 = $("#attribute2").val();
                            if ($("#attribute1 option:selected").text() != "All") {
                                var attribute1 = $("#attribute1").val();
                            } else {
                                var attribute1 = null;
                            }
                            var item = null;
                        }
                    }

                    setCookie("baseTypeSelectedId", baseType);
                    setCookie("typeSelectedId", type);
                    setCookie("attribute1SelectedId", attribute1);
                    setCookie("attribute2SelectedId", attribute2);
                    setCookie("itemSelectedId", item);

                    var selectedIds = String(baseType + "|" + type + "|" + attribute1 + "|" + attribute2); // basetype#type#attribute1#attribute2
                    $.get("/UsersItems/Refresh/" + selectedIds, function (data) {
                        $("#databaseItems").html(data);
                        setOldValues();
                    });
                });

                // Functions to set cookies behaviour.
                function setCookie(cname, cvalue) {
                    document.cookie = cname + "=" + cvalue;
                }

                function getCookie(cname) {
                    var name = cname + "=";
                    var decodedCookie = decodeURIComponent(document.cookie);
                    var ca = decodedCookie.split(";");
                    for (var i = 0; i < ca.length; i++) {
                        var c = ca[i];
                        while (c.charAt(0) == ' ') {
                            c = c.substring(1);
                        }
                        if (c.indexOf(name) == 0) {
                            return c.substring(name.length, c.length);
                        }
                    }
                    return "";
                }

                function setOldValues() {
                    var baseTypeSelectedId = getCookie("baseTypeSelectedId");
                    var typeSelectedId = getCookie("typeSelectedId");
                    var attribute1SelectedId = getCookie("attribute1SelectedId");
                    var attribute2SelectedId = getCookie("attribute2SelectedId");
                    var itemSelectedId = getCookie("itemSelectedId");

                    if (baseTypeSelectedId != "" && baseTypeSelectedId != "null") {
                        $("#baseTypes").val(baseTypeSelectedId);
                    }
                    else {
                        $("#baseTypes option:first").val();
                    }

                    if (typeSelectedId != "" && typeSelectedId != "null") {
                        $("#types").val(typeSelectedId);
                    }
                    else {
                        $("#types option:first").val();
                    }

                    if (attribute1SelectedId != "" && attribute1SelectedId != "null") {
                        $("#attribute1").val(attribute1SelectedId);
                    }
                    else {
                        $("#attribute1 option:first").val();
                    }

                    if (attribute2SelectedId != "" && attribute2SelectedId != "null") {
                        $("#attribute2").val(attribute2SelectedId);

                    }
                    else {
                        $("#attribute2 option:first").val();
                    }

                    if (itemSelectedId != "" && itemSelectedId != "null") {
                        $("#items").val(itemSelectedId);

                    }
                    else {
                        $("#items option:first").val();
                    }
                }
            });
    </script>
}
