
@{
    var signsList = new SelectList(new[]
    {
        new {Id = "", Sign = ""},
        new {Id = "1", Sign = "= (equal)"},
        new {Id = "2", Sign = "> (greater than)"},
        new {Id = "3", Sign = "< (less than)"},
        new {Id = "4", Sign = ">= (greater or equal)"},
        new {Id = "5", Sign = "<= (less or equal)"},
    },
    "Id", "Sign", "");

    var itemRarity = new SelectList(new[]
    {
        new {Id = "", Name = "All"},
        new {Id = "1", Name = "Normal"},
        new {Id = "2", Name = "Magic"},
        new {Id = "3", Name = "Rare"},
        new {Id = "4", Name = "Unique"},
    },
    "Id", "Name", "");

    var boolSelect = new SelectList(new[]
    {
        new {Id = "0", Name = "No (default)"},
        new {Id = "1", Name = "Yes"},
    },
    "Id", "Name", 0);

    var inGameColours = new SelectList(new[]
    {
        new {Value = "200,200,200", Note = "Normal item"},
        new {Value = "136,136,255", Note = "Magic item"},
        new {Value = "255,255,119", Note = "Rare item"},
        new {Value = "175,96,37", Note = "Unique item"},
        new {Value = "27,162,155", Note = "Skill gem"},
        new {Value = "170,158,130", Note = "Currency"},
        new {Value = "74,230,58", Note = "Quest item"},
        new {Value = "14,186,255", Note = "Divination card"},
        new {Value = "127,127,127", Note = "Default text"},
        new {Value = "255,255,255", Note = "Value text"},
        new {Value = "136,136,255", Note = "Augmented value text"},
        new {Value = "150,0,0", Note = "Fire damage"},
        new {Value = "54,100,146", Note = "Cold damage"},
        new {Value = "255,215,0", Note = "Lightning damage"},
        new {Value = "208,32,144", Note = "Chaos damage"},
        new {Value = "184,218,242", Note = "Crafted mod"},
        new {Value = "210,0,0", Note = "Corrupted"},
        new {Value = "180,96,0", Note = "Supporter pack new item"},
        new {Value = "163,141,109", Note = "Supporter pack item"},
        new {Value = "255,200,0", Note = "Nemesis mod"},
        new {Value = "255,40,0", Note = "Nemesis mod outline"},
        new {Value = "210,0,220", Note = "Bloodline mod"},
        new {Value = "74,0,160", Note = "Bloodline mod outline"},
        new {Value = "50,230,100", Note = "Torment mod"},
        new {Value = "0,100,150", Note = "Torment mod outline"},
        new {Value = "231,180,120", Note = "Title"},
        new {Value = "170,158,120", Note = "Favour"},
        new {Value = "255,192,203", Note = "Unknown"},
        new {Value = "30,144,255", Note = "Unknown"},
        new {Value = "124,81,50", Note = "Premium stash tab"},
        new {Value = "191,91,0", Note = "Premium stash tab"},
        new {Value = "254,191,128", Note = "Premium stash tab"},
        new {Value = "38,0,86", Note = "Premium stash tab"},
        new {Value = "88,0,179", Note = "Premium stash tab"},
        new {Value = "192,128,254", Note = "Premium stash tab"},
        new {Value = "98,128,0", Note = "Premium stash tab"},
        new {Value = "191,244,0", Note = "Premium stash tab"},
        new {Value = "239,254,128", Note = "Premium stash tab"},
        new {Value = "86,0,0", Note = "Premium stash tab"},
        new {Value = "191,0,0", Note = "Premium stash tab"},
        new {Value = "254,128,128", Note = "Premium stash tab"},
        new {Value = "0,0,128", Note = "Premium stash tab"},
        new {Value = "0,0,254", Note = "Premium stash tab"},
        new {Value = "128,179,254", Note = "Premium stash tab"},
        new {Value = "254,170,0", Note = "Premium stash tab"},
        new {Value = "254,213,0", Note = "Premium stash tab"},
        new {Value = "254,254,153", Note = "Premium stash tab"},
        new {Value = "114,0,83", Note = "Premium stash tab"},
        new {Value = "204,0,154", Note = "Premium stash tab"},
        new {Value = "254,128,222", Note = "Premium stash tab"},
        new {Value = "0,73,0", Note = "Premium stash tab"},
        new {Value = "0,191,0", Note = "Premium stash tab"},
        new {Value = "128,254,128", Note = "Premium stash tab"},
        new {Value = "42,42,42", Note = "Premium stash tab"},
        new {Value = "135,135,135", Note = "Premium stash tab"},
        new {Value = "221,221,221", Note = "Premium stash tab"},
    },"Value", "Note");
}

<button id="lvlToggle" type="button" class="btn btn-primary btn-sm container" aria-label="Left Align">
    Level information
    <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
</button>
<p />

<div id="itemLvl" class="container body-content">
    <p>
        @Html.Label("Item level: ")
        @Html.DropDownList("ItemLvlSelectSign", signsList, new { @class = "my-btn" })
        @Html.DropDownList("ItemLvlSelect", new SelectList(Enumerable.Range(0, 101)), "All", new { @class = "my-btn" })
        <strong>OR</strong>
        @Html.Label("select item level range: ")
        @Html.DropDownList("ItemLvlRangeSelect1", new SelectList(Enumerable.Range(0, 101)), "All", new { @class = "my-btn" })
        @Html.DropDownList("ItemLvlRangeSelect2", new SelectList(Enumerable.Range(0, 101)), "All", new { @class = "my-btn" })
    </p>
    <p>
        @Html.Label("Item drop level: ")
        @Html.DropDownList("DropLevelSelectSign", signsList, new { @class = "my-btn" })
        @Html.DropDownList("DropLevelSelect", new SelectList(Enumerable.Range(0, 101)), "All", new { @class = "my-btn" })
    </p>
    <p>
        @Html.Label("Item quality: ")
        @Html.DropDownList("ItemQualitySelectSign", signsList, new { @class = "my-btn" })
        @Html.DropDownList("ItemQualitySelect", new SelectList(Enumerable.Range(0, 21)), "All", new { @class = "my-btn" })
    </p>
    <p>
        @Html.Label("Item rarity: ")
        @Html.DropDownList("ItemRaritySelectSign", signsList, new { @class = "my-btn" })
        @Html.DropDownList("ItemRaritySelect", itemRarity, new { @class = "my-btn" })
    </p>
</div>
<hr />

<button id="socketsToggle" type="button" class="btn btn-primary btn-sm container" aria-label="Left Align">
    Sockets information
    <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
</button>
<p />
<div id="sockets" class="container body-content">
    <p>
        @Html.Label("Number of sockets: ")
        @Html.DropDownList("SocketsNumberSelectSign", signsList, new { @class = "my-btn" })
        @Html.DropDownList("SocketsNumberSelect", new SelectList(Enumerable.Range(0, 7)), "All", new { @class = "my-btn" })
    </p>
    <p>
        @Html.Label("Number of linked sockets: ")
        @Html.DropDownList("LinkedSocketsNumberSelectSign", signsList, new { @class = "my-btn" })
        @Html.DropDownList("LinkedSocketsNumberSelect", new SelectList(Enumerable.Range(2, 5)), "All", new { @class = "my-btn" })
    </p>

    <p>
        @Html.Label("Colours of linked sockets: ")
        @Html.Label("Red: ", new { @class = "margin-left" })
        @Html.DropDownList("RedSocketsSelect", new SelectList(Enumerable.Range(0, 7)), "", new { @class = "my-btn" })
        @Html.Label("Green: ", new { @class = "margin-left" })
        @Html.DropDownList("GreenSocketsSelect", new SelectList(Enumerable.Range(0, 7)), "", new { @class = "my-btn" })
        @Html.Label("Blue: ", new { @class = "margin-left" })
        @Html.DropDownList("BlueSocketsSelect", new SelectList(Enumerable.Range(0, 7)), "", new { @class = "my-btn" })
        @Html.Label("White: ", new { @class = "margin-left" })
        @Html.DropDownList("WhiteSocketsSelect", new SelectList(Enumerable.Range(0, 7)), "", new { @class = "my-btn" })
    </p>
</div>
<hr />

<button id="sizeToggle" type="button" class="btn btn-primary btn-sm container" aria-label="Left Align">
    Dimension information
    <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
</button>
<p />
<div id="size" class="container body-content">
    <p>
        @Html.Label("Set height: ")
        @Html.DropDownList("HeightSelectSign", signsList, new { @class = "my-btn" })
        @Html.DropDownList("HeightSelect", new SelectList(Enumerable.Range(1, 4)), "All", new { @class = "my-btn" })
    </p>
    <p>
        @Html.Label("Set width: ")
        @Html.DropDownList("WidthSelectSign", signsList, new { @class = "my-btn" })
        @Html.DropDownList("WidthSelect", new SelectList(Enumerable.Range(1, 2)), "All", new { @class = "my-btn" })
    </p>
</div>
<hr />

<button id="otherToggle" type="button" class="btn btn-primary btn-sm container" aria-label="Left Align">
    Other information
    <span class="glyphicon glyphicon-menu-down" aria-hidden="true"></span>
</button>
<p />
<div id="other" class="container body-content">
    <p>
        @Html.Label("Identified?")
        @Html.DropDownList("IdentifiedSelect", boolSelect, new { @class = "my-btn" })
    </p>
    <p>
        @Html.Label("Corrupted?")
        @Html.DropDownList("CorruptedSelect", boolSelect, new { @class = "my-btn" })
    </p>
    <p>
        <span>
            @Html.Label("Border color: ")
            Set default?
            <select class="my-btn is-default-color">
                <option value="false">No</option>
                <option value="true" selected="selected">Yes</option>
            </select>
        </span>
        <br />
        <span class="color-selector">
            Select manually: 
            <input type="color" class="manual-color-picker" />
            <strong>OR</strong>
            <select id="dropdownColorPicker" class="my-btn dropdown-color-picker">
                <option value="">select in-game color</option>
                @{ foreach (var item in inGameColours)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                }
            </select>
@Html.Label("Select opacity: ", new { @class = "margin-left" })
@Html.DropDownList("BorderAlphaSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
        </span>
        @Html.Hidden("BorderColor")
    </p>
    <p>
        <span>
            @Html.Label("Text color: ")
            Set default?
            <select class="my-btn is-default-color">
                <option value="false">No</option>
                <option value="true" selected="selected">Yes</option>
            </select>
        </span>
        <br />
        <span class="color-selector">
            Select manually:
            <input type="color" class="manual-color-picker" />
            <strong>OR</strong>
            <select id="dropdownColorPicker" class="my-btn dropdown-color-picker">
                <option value="">select in-game color</option>
                @{ foreach (var item in inGameColours)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                }
            </select>
            @Html.Label("Select opacity: ", new { @class = "margin-left" })
            @Html.DropDownList("TextAlphaSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
        </span>
        @Html.Hidden("TextColor")
    </p>
    <p>
        <span>
            @Html.Label("Background color: ")
            Set default?
            <select class="my-btn is-default-color">
                <option value="false">No</option>
                <option value="true" selected="selected">Yes</option>
            </select>
        </span>
        <br />
        <span class="color-selector">
            Select manually:
            <input type="color" class="manual-color-picker" />
            <strong>OR</strong>
            <select id="dropdownColorPicker" class="my-btn dropdown-color-picker">
                <option value="">select in-game color</option>
                @{ foreach (var item in inGameColours)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                }
            </select>
            @Html.Label("Select opacity: ", new { @class = "margin-left" })
            @Html.DropDownList("BackAlphaSelect", new SelectList(Enumerable.Range(0, 256)), "", new { @class = "my-btn" })
        </span>
        @Html.Hidden("BackgroundColor")
    </p>
    <p>
        @Html.Label("Font size: ")
        @Html.DropDownList("FontSizeSelect", new SelectList(Enumerable.Range(18, 45)), "", new { @class = "my-btn" })
    </p>
    <p>
        @Html.Label("Play Alert Sound: ")
        @Html.DropDownList("PlayAlertSoundTypeSelect", new SelectList(Enumerable.Range(1, 26)), "", new { @class = "my-btn" })
        @Html.DropDownList("PlayAlertSoundVolumeSelect", new SelectList(Enumerable.Range(0, 300)), "", new { @class = "my-btn" })
    </p>
</div>
<hr />

<div id="saveButton" class="pull-right">
    <p>
        <span class="text-uppercase text-primary text-danger"><b>Show or hide item?</b></span>
        <br />
        <select id="showOrHideSelect" class="btn btn-default btn-danger btn-lg pull-right" name="Show">
            <option value="0">Hide</option>
            <option value="1" selected="selected">Show</option>
        </select>
    </p>
    <p>
        <button id="saveItem" type="submit" class="btn btn-default btn-success btn-lg pull-right margin-top" aria-label="Left Align">
            Add item
            <span class="glyphicon glyphicon-menu-right" aria-hidden="true"></span>
        </button>
    </p>
</div>